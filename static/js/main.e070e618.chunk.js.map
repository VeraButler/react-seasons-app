{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconLeft","react_default","a","createElement","className","iconRight","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","concat","Spinner","message","defaultProps","App","state","errorMessage","renderContent","_this","src_SeasonDisplay_0","src_Spinner","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,uBACNC,SAAUC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+BACvBC,UAAWJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAE5BE,OAAQ,CACJP,KAAM,qBACNC,SAAUC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qCACvBC,UAAWJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yCA2BjBG,EAZO,SAAAC,GAClB,IAZeC,EAAKC,EAYdC,GAZSF,EAYUD,EAAMC,KAZXC,GAYgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAILK,EAEWjB,EAAac,GAA3CZ,EAFmBe,EAEnBf,KAAMC,EAFac,EAEbd,SAAUK,EAFGS,EAEHT,UAExB,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAW,OAAoBJ,IAC9BV,EAAAC,EAAAC,cAAA,WAAMH,GACNC,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,WAAME,KCjCZW,EAAU,SAACR,GACb,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVI,EAAMS,YAQ3BD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCdTG,6MAEFC,MAAQ,CAAEX,IAAK,KAAMY,aAAc,MAYnCC,cAAgB,WACZ,OAAuB,OAAnBC,EAAKH,MAAMX,KAA4C,KAA5Bc,EAAKH,MAAMC,aAC/BpB,EAAAC,EAAAC,cAACqB,EAAD,CAAef,IAAKc,EAAKH,MAAMX,MACZ,OAAnBc,EAAKH,MAAMX,KAA4C,KAA5Bc,EAAKH,MAAMC,aACtCpB,EAAAC,EAAAC,cAAA,qBAAaoB,EAAKH,MAAMC,cAI3BpB,EAAAC,EAAAC,cAACsB,EAAD,CAASR,QAAQ,8HAlBT,IAAAS,EAAAC,KAEhBC,OAAOC,UAAUC,YAAYC,mBACzB,SAAAC,GAAQ,OAAKN,EAAKO,SAAS,CAAExB,IAAKuB,EAASE,OAAOC,YAClD,SAAAC,GAAG,OAAIV,EAAKO,SAAS,CAAEZ,aAAce,EAAInB,6CAmB7C,OACIhB,EAAAC,EAAAC,cAAA,OAAMC,UAAU,cAAhB,IAA+BuB,KAAKL,wBA5B9Be,IAAMC,WAiCxBC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.e070e618.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: 'Let\\'s hit the beach!',\r\n        iconLeft: <i className=\"icon-left massive sun icon\"></i>,\r\n        iconRight: <i className=\"icon-right massive sun icon\"></i>\r\n    },\r\n    winter: {\r\n        text: 'Brr, it is chilly!',\r\n        iconLeft: <i className=\"icon-left massive snowflake icon\"></i>,\r\n        iconRight: <i className=\"icon-right massive snowflake icon\"></i>\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    // if in Northern Hemisphere -- lat > 0: \r\n    // Summer = April - Sept == month[3:8]\r\n    // Else Winter\r\n    if (month > 2 && month < 9) {\r\n        return lat > 0 ? 'summer' : 'winter';\r\n    } else {\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n};\r\n// Returned Component\r\nconst SeasonDisplay = props => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const { text, iconLeft, iconRight } = seasonConfig[season]; \r\n\r\n    return (\r\n        <div className={`season-display ${season}`}>\r\n            <div>{iconLeft}</div>\r\n            <h1>{text}</h1>\r\n            <div>{iconRight}</div>\r\n        </div>\r\n    );\r\n}\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div>\r\n            <div className=\"ui active dimmer\">\r\n                <div className=\"ui big text loader\">\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n// best practices to have defaultProps in case of errors\r\nSpinner.defaultProps = {\r\n    message: 'Loading...'\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\nclass App extends React.Component {\r\n    // equivalent to constructor(super){...}\r\n    state = { lat: null, errorMessage: '' };\r\n\r\n    componentDidMount() {\r\n        // Geolocation; best practice within componentDidMount \r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position =>  this.setState({ lat: position.coords.latitude }),\r\n            err => this.setState({ errorMessage: err.message })\r\n        );\r\n\r\n    }\r\n\r\n    // used if there is styling or wrappers needed for return of if/then/else statements\r\n    renderContent = () => {\r\n        if (this.state.lat !== null && this.state.errorMessage === '') {\r\n            return <SeasonDisplay lat={this.state.lat} />;\r\n        } else if (this.state.lat === null && this.state.errorMessage !== '') {\r\n            return <div>Error: {this.state.errorMessage}</div>\r\n        } else {\r\n            return (\r\n                // loading animation\r\n                <Spinner message='Please allow location to see magic...' />\r\n            );\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            < div className=\"border-red\"> {this.renderContent()}</div>\r\n        );\r\n\r\n    }   \r\n}\r\nReactDOM.render(<App />, document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}